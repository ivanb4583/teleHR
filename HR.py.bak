import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from datetime import datetime
import mysql.connector

# Настраиваем логирование
logging.basicConfig(level=logging.INFO)

# Получаем API токен из файла
with open("API.txt", "r") as file:
    API_TOKEN = file.read().strip()

# Получаем настройки базы данных из файла
def load_db_config():
    with open("db1.txt", "r") as file:
        lines = file.readlines()
    return {
        "host": lines[0].strip(),
        "user": lines[1].strip(),
        "password": lines[2].strip(),
        "database": lines[3].strip(),
        "port": int(lines[4].strip()),
    }

db_config = load_db_config()

# Получаем ID администраторов из файла
def load_admin_ids():
    with open("admin.txt", "r") as file:
        return [int(line.strip()) for line in file.readlines()]

ADMIN_IDS = load_admin_ids()

# Создаем бота и диспетчер
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Функция подключения к базе данных
def get_db_connection():
    return mysql.connector.connect(**db_config)

# Создаем таблицы, если их нет
conn = get_db_connection()
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    telegram_id VARCHAR(255),
    name VARCHAR(255),
    phone_number VARCHAR(50),
    email VARCHAR(255),
    english_level INT,
    modern_pc VARCHAR(10),
    response_date DATETIME,
    hr VARCHAR(255)
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS feedback (
    id INT AUTO_INCREMENT PRIMARY KEY,
    telegram_id VARCHAR(255),
    feedback TEXT,
    response_date DATETIME
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS admin_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    action VARCHAR(255),
    user_id VARCHAR(255),
    admin_id VARCHAR(255),
    timestamp DATETIME
)''')

conn.commit()
conn.close()

# Определяем состояния для FSM
class Form(StatesGroup):
    name = State()
    phone_number = State()
    email = State()
    english_level = State()
    modern_pc = State()
    confirm_text1 = State()
    confirm_text2 = State()
    video_interview = State()

# Клавиатуры
keyboard_yes_no = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="Yes"), KeyboardButton(text="No")],
        [KeyboardButton(text="I need human help")]
    ],
    resize_keyboard=True
)

keyboard_submit = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="Submit")]
    ],
    resize_keyboard=True
)

# Обработка команды /start
@dp.message(Command(commands=["start"]))
async def start_command(message: types.Message, state: FSMContext):
    await message.reply("Welcome! Please provide your name:")
    await state.set_state(Form.name)

# Обработка ввода имени
@dp.message(StateFilter(Form.name))
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.reply("Please provide your phone number (e.g., +123456789):")
    await state.set_state(Form.phone_number)

# Обработка ввода номера телефона
@dp.message(StateFilter(Form.phone_number))
async def process_phone_number(message: types.Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await message.reply("Please provide your email:")
    await state.set_state(Form.email)

# Обработка ввода email
@dp.message(StateFilter(Form.email))
async def process_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.reply("Rate your English level from 1 to 10:")
    await state.set_state(Form.english_level)

# Обработка уровня английского
@dp.message(StateFilter(Form.english_level))
async def process_english_level(message: types.Message, state: FSMContext):
    try:
        english_level = int(message.text)
        if 1 <= english_level <= 10:
            await state.update_data(english_level=english_level)
            await message.reply("Do you have a modern PC or Laptop?", reply_markup=keyboard_yes_no)
            await state.set_state(Form.modern_pc)
        else:
            await message.reply("Please provide a valid number between 1 and 10.")
    except ValueError:
        await message.reply("Please provide a valid number between 1 and 10.")

# Обработка ответа на вопрос о наличии современного ПК
@dp.message(StateFilter(Form.modern_pc))
async def process_modern_pc(message: types.Message, state: FSMContext):
    if message.text in ["Yes", "No"]:
        await state.update_data(modern_pc=message.text)
        data = await state.get_data()

        # Записываем данные в базу
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO users (telegram_id, name, phone_number, email, english_level, modern_pc, response_date)
                          VALUES (%s, %s, %s, %s, %s, %s, %s)''',
                       (message.from_user.id, data['name'], data['phone_number'], data['email'],
                        data['english_level'], data['modern_pc'], datetime.utcnow()))
        conn.commit()
        conn.close()

        with open("1.txt", "r") as file:
            text1 = file.read()

        await message.reply(text1, reply_markup=keyboard_yes_no)
        await state.set_state(Form.confirm_text1)
    else:
        await message.reply("Please respond with Yes or No.")

# Обработка подтверждения текста 1
@dp.message(StateFilter(Form.confirm_text1))
async def process_confirm_text1(message: types.Message, state: FSMContext):
    if message.text == "Yes":
        with open("2.txt", "r") as file:
            text2 = file.read()

        await message.reply(text2, reply_markup=keyboard_yes_no)
        await state.set_state(Form.confirm_text2)
    elif message.text == "No":
        await message.reply("Are you sure?", reply_markup=keyboard_yes_no)
        await state.set_state(Form.confirm_text1)
    elif message.text == "I need human help":
        await message.reply("Please contact our HR on Telegram: @hr_contact")
    else:
        await message.reply("Please respond with Yes or No.")

@dp.message(StateFilter(Form.confirm_text1))
async def process_confirm_text1_feedback(message: types.Message, state: FSMContext):
    if message.text == "Yes":
        await message.reply("What confused you? Please write. It will help us make things better for future workers.", reply_markup=keyboard_submit)
        await state.set_state(Form.confirm_text1)
    elif message.text == "Submit":
        data = await state.get_data()
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO feedback (telegram_id, feedback, response_date) VALUES (%s, %s, %s)''',
                       (message.from_user.id, message.text, datetime.utcnow()))
        conn.commit()
        conn.close()
        await message.reply("Thank you! Your feedback has been recorded.")

# Обработка подтверждения текста 2
@dp.message(StateFilter(Form.confirm_text2))
async def process_confirm_text2(message: types.Message, state: FSMContext):
    if message.text == "Yes":
        with open("3.txt", "r") as file:
            text3 = file.read()

        await message.reply(text3, reply_markup=keyboard_yes_no)
        await state.set_state(Form.video_interview)
    elif message.text == "No":
        await message.reply("Are you sure?", reply_markup=keyboard_yes_no)
        await state.set_state(Form.confirm_text2)
    elif message.text == "I need human help":
        await message.reply("Please contact our HR on Telegram: @hr_contact")
    else:
        await message.reply("Please respond with Yes or No.")

@dp.message(StateFilter(Form.confirm_text2))
async def process_confirm_text2_feedback(message: types.Message, state: FSMContext):
    if message.text == "Yes":
        await message.reply("What confused you? Please write. It will help us make things better for future workers.", reply_markup=keyboard_submit)
        await state.set_state(Form.confirm_text2)
    elif message.text == "Submit":
        data = await state.get_data()
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO feedback (telegram_id, feedback, response_date) VALUES (%s, %s, %s)''',
                       (message.from_user.id, message.text, datetime.utcnow()))
        conn.commit()
        conn.close()
        await message.reply("Thank you! Your feedback has been recorded.")

# Continuing from line 248
# Обработка состояния Form.video_interview
@dp.message(StateFilter(Form.video_interview))
async def process_video_interview(message: types.Message, state: FSMContext):
    if message.text == "Yes":
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, f"User with ID {message.from_user.id} passed the video interview. Please check.")
            except Exception as e:
                print(f"Failed to send message to admin {admin_id}: {e}")
        await message.reply("Thank you! Your response has been recorded.", 
                            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("Start"))
        await state.clear()
    elif message.text == "No":
        await message.reply("Thank you for your response. Let us know if you need assistance.", 
                            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("Start"))
        await state.clear()
    elif message.text == "I need human help":
        await message.reply("Please contact our HR on Telegram: @hr_contact",
                            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("Start"))
    else:
        await message.reply("Please respond with Yes or No.")

# Обработка неотловленных событий
@dp.errors(FSMContext)
async def handle_unhandled_updates(update: types.Update, exception):
    if update.message:
        await update.message.reply("Oops, something went wrong, but you can always restart this survey with the Start button.", 
                                   reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("Start"))
    return True

# Обработка команды /help
@dp.message(Command(commands=["help"]))
async def help_command(message: types.Message):
    await message.reply("If you need assistance, please contact our HR on Telegram: @hr_contact.")

# Универсальный обработчик текста (в случае если пользователь пишет что-то не то)
@dp.message()
async def handle_unexpected_messages(message: types.Message):
    await message.reply(
        "I didn't understand that. Please use the commands or buttons provided.", 
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="Start")]],
            resize_keyboard=True
        )
    )

# Обработка неотловленных событий
@dp.errors(FSMContext)
async def handle_unhandled_updates(update: types.Update, exception):
    if update.message:
        await update.message.reply(
            "Oops, something went wrong, but you can always restart this survey with the Start button.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="Start")]],
                resize_keyboard=True
            )
        )
    return True

# Запуск бота
async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
